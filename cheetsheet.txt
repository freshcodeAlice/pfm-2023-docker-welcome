Проблеми, які постають в процесі деплою
1. Складно кожен раз розгортати проєкт на новому місці
2. Серверне оточення може залежати від певної версії ноди, і ви не завжди можете це змінити


Docker ці проблеми вирішує так:
 створення ізольованих контейнерів, незалежних від оточення, в яких проєкт розгортається один раз


Docker має клієнт-серверну архітектуру - демон-сервер працює на ОС без втручання користувача, клієнт-cli приймає команди для керування системою


Image (образ) - запакований, підготовлений до роботи проєкт зі всіма конфігураціями, файлами і кодом, на основі якого будується контейнер.


Container (контейнер) - працюючий екземпляр образа.


Тег - це вказання певної версії для image, що ми хочемо використовувати.
Якщо не вказати тег, завантажується остання найактуальніша (latest) версія

docker pull image_name:tag - стягує з dockerhub вказаний образ

docker ps - виводить список працюючих контейнерів
        -a - список штадаунутих контейнерів

docker rm Container_name - видаляє контейнер



docker run -опції image_name - запускає на основі образа контейнер. Якщо образ локально на комп'ютері не знайдено - буде шукати аналогічний в dockerhub.

-d - запускає контейнер в фоновому режимі
-i - робить контейнер інтерактивним
-t - приєднує до контейнера термінал
-e - дозволяє передати контейнеру певні змінні середовища (enviroment variables) при піднятті


docker run -it 
--name sql_db 
-e POSTGRES_PASSWORD=test 
-e POSTGRES_USER=test 
-e POSTGRES_DB=docker_db 
-p номер-порта-на-хостовій-системі:номер-порта-всередині-контейнера
-p 5000:5432
postgres:14-alpine


docker stop ім'я_контейнера - зупиняє контейнер і його процес
docker start ім'я_контейнера - знову його запускає


Зв'язування даних (binding volumes)
-v адреса-директорії-на-хостовій-системі:адреса-всередині-контейнера-яка-сполучена-з-ємністю
-v /home/freshcodealice/docker_db_backup:/var/lib/postgresql/data



/*
Task: знайти на dockerhub образ mongo та створити контейнер на його основі
Потребує volumes та ports


Потім:
1. Створити колекцію, заінсертити в неї дані
2. Покласти контейнер
3. Видалити його
4. Підняти новий з тими ж налаштуваннями
5. Перевірити наявність даних

*/



Контейнеризація проєкту

1 компонента = 1 образ -> 1 контейнер

Інструкції для Докера - Dockerfile

1. Ми можемо засновувати власний образ або з нічого або з іншого існуючого в DockerHub-і образа
2. Образ контейнера - це пуста кімната, всередину якої потрібно скопіювати і налаштувати всередині всі файли проєкту
3. Передбачити відкриття певних портів
4. Запуск проєкту всередині контейнера

1. Створити Dockerfile
2. Прописати команди для пакування образа
3. Збілдити проєкт
docker build
(опція -t для імені образа)
4. Створити контейнер на основі цього образа

docker run -dit -p 5000:3000 -v "$(pwd)":/app:ro --name server_server server_image